{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udcda Documentaci\u00f3n del Servidor Nginx en Docker Esta documentaci\u00f3n explica c\u00f3mo se instal\u00f3 y configur\u00f3 Nginx en Docker, c\u00f3mo se sirvieron aplicaciones en localhost y c\u00f3mo se configuraron m\u00faltiples aplicaciones en distintos puertos. Incluye las secciones siguientes: Instalaci\u00f3n de Nginx en Docker Configuraci\u00f3n del Servidor Servir M\u00faltiples Aplicaciones","title":"Inicio"},{"location":"#documentacion-del-servidor-nginx-en-docker","text":"Esta documentaci\u00f3n explica c\u00f3mo se instal\u00f3 y configur\u00f3 Nginx en Docker, c\u00f3mo se sirvieron aplicaciones en localhost y c\u00f3mo se configuraron m\u00faltiples aplicaciones en distintos puertos. Incluye las secciones siguientes: Instalaci\u00f3n de Nginx en Docker Configuraci\u00f3n del Servidor Servir M\u00faltiples Aplicaciones","title":"\ud83d\udcda Documentaci\u00f3n del Servidor Nginx en Docker"},{"location":"apps-multiples/","text":"Servir M\u00faltiples Aplicaciones con Nginx en Docker En esta secci\u00f3n configuraremos Nginx dentro de un contenedor Docker para servir dos aplicaciones diferentes , cada una en un puerto distinto. 1\ufe0f. Estructura del proyecto Supongamos que tu proyecto tiene esta estructura: SERVIDOR-NGINX/ \u251c\u2500\u2500 app1/ \u2502 \u251c\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 dist/ \u2502 \u2514\u2500\u2500 main.js \u251c\u2500\u2500 app2/ \u2502 \u251c\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 dist/ \u2502 \u2514\u2500\u2500 main.js \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 nginx.conf app1/ \u2192 Primera aplicaci\u00f3n. app2/ \u2192 Segunda aplicaci\u00f3n. 2\ufe0f. Configurar Nginx para m\u00faltiples aplicaciones Edita tu nginx.conf con el siguiente contenido: events {} http { # Aplicaci\u00f3n 1 server { listen 80; server_name localhost; root /var/www/app1; index index.html; location / { try_files $uri $uri/ =404; } } # Aplicaci\u00f3n 2 server { listen 81; server_name localhost; root /var/www/app2; index index.html; location / { try_files $uri $uri/ =404; } } } Explicaci\u00f3n: Cada server escucha en un puerto diferente (80 para app1 y 81 para app2). Cada root apunta a la carpeta de la aplicaci\u00f3n correspondiente. Esto permite escalar y servir m\u00faltiples apps desde un mismo contenedor. 3\ufe0f. Modificar el Dockerfile Actualiza tu Dockerfile para copiar ambas aplicaciones y la configuraci\u00f3n de Nginx: FROM ubuntu:22.04 ENV DEBIAN_FRONTEND=noninteractive RUN apt-get update && \\ apt-get install -y nginx && \\ apt-get clean && \\ rm -rf /var/lib/apt/lists/* # Copiar las dos aplicaciones COPY app1 /var/www/app1 COPY app2 /var/www/app2 # Copiar la configuraci\u00f3n de Nginx COPY nginx.conf /etc/nginx/nginx.conf # Exponer los puertos 80 y 81 EXPOSE 80 81 # Comando por defecto: inicia Nginx en primer plano CMD [\"nginx\", \"-g\", \"daemon off;\"] 4\ufe0f. Construir y ejecutar el contenedor docker build -t sw-nginx . docker run -d -p 8080:80 -p 9090:81 --name sw-nginx sw-nginx Esto har\u00e1 que: app1 se vea en http://localhost:8080 app2 se vea en http://localhost:9090 5\ufe0f. Verificar las aplicaciones Abre tu navegador y prueba ambos puertos. Cada aplicaci\u00f3n deber\u00eda cargarse con sus respectivos cambios y archivos est\u00e1ticos.","title":"M\u00faltiples Apps"},{"location":"apps-multiples/#servir-multiples-aplicaciones-con-nginx-en-docker","text":"En esta secci\u00f3n configuraremos Nginx dentro de un contenedor Docker para servir dos aplicaciones diferentes , cada una en un puerto distinto.","title":"Servir M\u00faltiples Aplicaciones con Nginx en Docker"},{"location":"apps-multiples/#1-estructura-del-proyecto","text":"Supongamos que tu proyecto tiene esta estructura: SERVIDOR-NGINX/ \u251c\u2500\u2500 app1/ \u2502 \u251c\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 dist/ \u2502 \u2514\u2500\u2500 main.js \u251c\u2500\u2500 app2/ \u2502 \u251c\u2500\u2500 index.html \u2502 \u2514\u2500\u2500 dist/ \u2502 \u2514\u2500\u2500 main.js \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 nginx.conf app1/ \u2192 Primera aplicaci\u00f3n. app2/ \u2192 Segunda aplicaci\u00f3n.","title":"1\ufe0f. Estructura del proyecto"},{"location":"apps-multiples/#2-configurar-nginx-para-multiples-aplicaciones","text":"Edita tu nginx.conf con el siguiente contenido: events {} http { # Aplicaci\u00f3n 1 server { listen 80; server_name localhost; root /var/www/app1; index index.html; location / { try_files $uri $uri/ =404; } } # Aplicaci\u00f3n 2 server { listen 81; server_name localhost; root /var/www/app2; index index.html; location / { try_files $uri $uri/ =404; } } } Explicaci\u00f3n: Cada server escucha en un puerto diferente (80 para app1 y 81 para app2). Cada root apunta a la carpeta de la aplicaci\u00f3n correspondiente. Esto permite escalar y servir m\u00faltiples apps desde un mismo contenedor.","title":"2\ufe0f. Configurar Nginx para m\u00faltiples aplicaciones"},{"location":"apps-multiples/#3-modificar-el-dockerfile","text":"Actualiza tu Dockerfile para copiar ambas aplicaciones y la configuraci\u00f3n de Nginx: FROM ubuntu:22.04 ENV DEBIAN_FRONTEND=noninteractive RUN apt-get update && \\ apt-get install -y nginx && \\ apt-get clean && \\ rm -rf /var/lib/apt/lists/* # Copiar las dos aplicaciones COPY app1 /var/www/app1 COPY app2 /var/www/app2 # Copiar la configuraci\u00f3n de Nginx COPY nginx.conf /etc/nginx/nginx.conf # Exponer los puertos 80 y 81 EXPOSE 80 81 # Comando por defecto: inicia Nginx en primer plano CMD [\"nginx\", \"-g\", \"daemon off;\"]","title":"3\ufe0f. Modificar el Dockerfile"},{"location":"apps-multiples/#4-construir-y-ejecutar-el-contenedor","text":"docker build -t sw-nginx . docker run -d -p 8080:80 -p 9090:81 --name sw-nginx sw-nginx Esto har\u00e1 que: app1 se vea en http://localhost:8080 app2 se vea en http://localhost:9090","title":"4\ufe0f. Construir y ejecutar el contenedor"},{"location":"apps-multiples/#5-verificar-las-aplicaciones","text":"Abre tu navegador y prueba ambos puertos. Cada aplicaci\u00f3n deber\u00eda cargarse con sus respectivos cambios y archivos est\u00e1ticos.","title":"5\ufe0f. Verificar las aplicaciones"},{"location":"configuracion/","text":"Configuraci\u00f3n del Servidor Nginx para Servir la Aplicaci\u00f3n En esta secci\u00f3n se explica c\u00f3mo configurar Nginx dentro del contenedor Docker para servir una aplicaci\u00f3n web local desde la carpeta del proyecto. 1\ufe0f. Estructura del proyecto Supongamos que tu proyecto tiene esta estructura: SERVIDOR-NGINX/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 styles.css \u2502 \u2514\u2500\u2500 dist/ \u2502 \u2514\u2500\u2500 main.js \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 nginx.conf app/ \u2192 Carpeta que contiene tu aplicaci\u00f3n web. nginx.conf \u2192 Archivo de configuraci\u00f3n de Nginx. 2\ufe0f. Configurar Nginx Crea un archivo llamado nginx.conf en la ra\u00edz del proyecto con el siguiente contenido: events {} http { server { listen 80; server_name localhost; root /var/www/app; index index.html; location / { try_files $uri $uri/ =404; } } } Explicaci\u00f3n: listen 80; \u2192 El servidor escuchar\u00e1 en el puerto 80 del contenedor. root /var/www/app; \u2192 La carpeta dentro del contenedor donde estar\u00e1n los archivos de tu app. index index.html; \u2192 Archivo principal de la aplicaci\u00f3n. location / { try_files $uri $uri/ =404; } \u2192 Sirve archivos existentes y devuelve 404 si no existen. 3\ufe0f. Modificar el Dockerfile Actualiza tu Dockerfile para copiar la aplicaci\u00f3n y la configuraci\u00f3n: FROM ubuntu:22.04 ENV DEBIAN_FRONTEND=noninteractive RUN apt-get update && \\ apt-get install -y nginx && \\ apt-get clean && \\ rm -rf /var/lib/apt/lists/* # Copiar los archivos de la aplicaci\u00f3n COPY app /var/www/app # Copiar la configuraci\u00f3n de Nginx COPY nginx.conf /etc/nginx/nginx.conf # Exponer el puerto 80 EXPOSE 80 # Comando por defecto: inicia Nginx en primer plano CMD [\"nginx\", \"-g\", \"daemon off;\"] 4\ufe0f. Construir y ejecutar el contenedor Construye la imagen y ejecuta el contenedor: docker build -t sw-nginx . docker run -d -p 8080:80 --name sw-nginx sw-nginx 5\ufe0f. Verificar la aplicaci\u00f3n Abre tu navegador y entra a: http://localhost:8080 Deber\u00edas ver tu aplicaci\u00f3n web funcionando correctamente dentro del contenedor Docker con Nginx.","title":"Configuraci\u00f3n"},{"location":"configuracion/#configuracion-del-servidor-nginx-para-servir-la-aplicacion","text":"En esta secci\u00f3n se explica c\u00f3mo configurar Nginx dentro del contenedor Docker para servir una aplicaci\u00f3n web local desde la carpeta del proyecto.","title":"Configuraci\u00f3n del Servidor Nginx para Servir la Aplicaci\u00f3n"},{"location":"configuracion/#1-estructura-del-proyecto","text":"Supongamos que tu proyecto tiene esta estructura: SERVIDOR-NGINX/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 styles.css \u2502 \u2514\u2500\u2500 dist/ \u2502 \u2514\u2500\u2500 main.js \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 nginx.conf app/ \u2192 Carpeta que contiene tu aplicaci\u00f3n web. nginx.conf \u2192 Archivo de configuraci\u00f3n de Nginx.","title":"1\ufe0f. Estructura del proyecto"},{"location":"configuracion/#2-configurar-nginx","text":"Crea un archivo llamado nginx.conf en la ra\u00edz del proyecto con el siguiente contenido: events {} http { server { listen 80; server_name localhost; root /var/www/app; index index.html; location / { try_files $uri $uri/ =404; } } } Explicaci\u00f3n: listen 80; \u2192 El servidor escuchar\u00e1 en el puerto 80 del contenedor. root /var/www/app; \u2192 La carpeta dentro del contenedor donde estar\u00e1n los archivos de tu app. index index.html; \u2192 Archivo principal de la aplicaci\u00f3n. location / { try_files $uri $uri/ =404; } \u2192 Sirve archivos existentes y devuelve 404 si no existen.","title":"2\ufe0f. Configurar Nginx"},{"location":"configuracion/#3-modificar-el-dockerfile","text":"Actualiza tu Dockerfile para copiar la aplicaci\u00f3n y la configuraci\u00f3n: FROM ubuntu:22.04 ENV DEBIAN_FRONTEND=noninteractive RUN apt-get update && \\ apt-get install -y nginx && \\ apt-get clean && \\ rm -rf /var/lib/apt/lists/* # Copiar los archivos de la aplicaci\u00f3n COPY app /var/www/app # Copiar la configuraci\u00f3n de Nginx COPY nginx.conf /etc/nginx/nginx.conf # Exponer el puerto 80 EXPOSE 80 # Comando por defecto: inicia Nginx en primer plano CMD [\"nginx\", \"-g\", \"daemon off;\"]","title":"3\ufe0f. Modificar el Dockerfile"},{"location":"configuracion/#4-construir-y-ejecutar-el-contenedor","text":"Construye la imagen y ejecuta el contenedor: docker build -t sw-nginx . docker run -d -p 8080:80 --name sw-nginx sw-nginx","title":"4\ufe0f. Construir y ejecutar el contenedor"},{"location":"configuracion/#5-verificar-la-aplicacion","text":"Abre tu navegador y entra a: http://localhost:8080 Deber\u00edas ver tu aplicaci\u00f3n web funcionando correctamente dentro del contenedor Docker con Nginx.","title":"5\ufe0f. Verificar la aplicaci\u00f3n"},{"location":"instalacion/","text":"Instalaci\u00f3n de Nginx en Docker En esta secci\u00f3n se explica c\u00f3mo instalar Nginx dentro de un contenedor Docker , partiendo desde una imagen base de Ubuntu 22.04 , sin usar im\u00e1genes preconfiguradas. 1\ufe0f. Crear el Dockerfile En la ra\u00edz del proyecto, crea un archivo llamado Dockerfile con el siguiente contenido: FROM ubuntu:22.04 # Evita prompts interactivos ENV DEBIAN_FRONTEND=noninteractive # Instalamos Nginx y limpiamos basura RUN apt-get update && \\ apt-get install -y nginx && \\ apt-get clean && \\ rm -rf /var/lib/apt/lists/* # Copiamos las dos apps COPY app1 /var/www/app1 COPY app2 /var/www/app2 # Copiamos la configuraci\u00f3n personalizada de Nginx COPY nginx.conf /etc/nginx/nginx.conf # Damos permisos correctos RUN chmod -R 755 /var/www && chown -R www-data:www-data /var/www # Exponemos los puertos de ambas apps EXPOSE 80 81 # Comando por defecto: inicia Nginx en primer plano CMD [\"nginx\", \"-g\", \"daemon off;\"] 2\ufe0f. Construir la imagen Docker Desde PowerShell o terminal, dentro del proyecto, ejecuta: docker build -t sw-nginx . Esto crear\u00e1 una imagen llamada sw-nginx basada en Ubuntu con Nginx instalado. 3\ufe0f. Crear y ejecutar el contenedor Ejecuta el contenedor con: docker run -d -p 8080:80 --name sw-nginx sw-nginx Esto har\u00e1 que: El contenedor se inicie en segundo plano. El puerto 80 del contenedor se exponga al 8080 local. El contenedor se nombre como sw-nginx . 4\ufe0f. Verificar instalaci\u00f3n Abre tu navegador y entra a: http://localhost:8080 Deber\u00edas ver la p\u00e1gina de bienvenida por defecto de Nginx.","title":"Instalaci\u00f3n"},{"location":"instalacion/#instalacion-de-nginx-en-docker","text":"En esta secci\u00f3n se explica c\u00f3mo instalar Nginx dentro de un contenedor Docker , partiendo desde una imagen base de Ubuntu 22.04 , sin usar im\u00e1genes preconfiguradas.","title":"Instalaci\u00f3n de Nginx en Docker"},{"location":"instalacion/#1-crear-el-dockerfile","text":"En la ra\u00edz del proyecto, crea un archivo llamado Dockerfile con el siguiente contenido: FROM ubuntu:22.04 # Evita prompts interactivos ENV DEBIAN_FRONTEND=noninteractive # Instalamos Nginx y limpiamos basura RUN apt-get update && \\ apt-get install -y nginx && \\ apt-get clean && \\ rm -rf /var/lib/apt/lists/* # Copiamos las dos apps COPY app1 /var/www/app1 COPY app2 /var/www/app2 # Copiamos la configuraci\u00f3n personalizada de Nginx COPY nginx.conf /etc/nginx/nginx.conf # Damos permisos correctos RUN chmod -R 755 /var/www && chown -R www-data:www-data /var/www # Exponemos los puertos de ambas apps EXPOSE 80 81 # Comando por defecto: inicia Nginx en primer plano CMD [\"nginx\", \"-g\", \"daemon off;\"]","title":"1\ufe0f. Crear el Dockerfile"},{"location":"instalacion/#2-construir-la-imagen-docker","text":"Desde PowerShell o terminal, dentro del proyecto, ejecuta: docker build -t sw-nginx . Esto crear\u00e1 una imagen llamada sw-nginx basada en Ubuntu con Nginx instalado.","title":"2\ufe0f. Construir la imagen Docker"},{"location":"instalacion/#3-crear-y-ejecutar-el-contenedor","text":"Ejecuta el contenedor con: docker run -d -p 8080:80 --name sw-nginx sw-nginx Esto har\u00e1 que: El contenedor se inicie en segundo plano. El puerto 80 del contenedor se exponga al 8080 local. El contenedor se nombre como sw-nginx .","title":"3\ufe0f. Crear y ejecutar el contenedor"},{"location":"instalacion/#4-verificar-instalacion","text":"Abre tu navegador y entra a: http://localhost:8080 Deber\u00edas ver la p\u00e1gina de bienvenida por defecto de Nginx.","title":"4\ufe0f. Verificar instalaci\u00f3n"}]}